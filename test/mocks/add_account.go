// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/add_account.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	usecase "github.com/Williancc1557/Oauth2.0-golang/internal/domain/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockAddAccount is a mock of AddAccount interface.
type MockAddAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAddAccountMockRecorder
}

// MockAddAccountMockRecorder is the mock recorder for MockAddAccount.
type MockAddAccountMockRecorder struct {
	mock *MockAddAccount
}

// NewMockAddAccount creates a new mock instance.
func NewMockAddAccount(ctrl *gomock.Controller) *MockAddAccount {
	mock := &MockAddAccount{ctrl: ctrl}
	mock.recorder = &MockAddAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddAccount) EXPECT() *MockAddAccountMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAddAccount) Add(account *usecase.AddAccountInput) (*usecase.AddAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", account)
	ret0, _ := ret[0].(*usecase.AddAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAddAccountMockRecorder) Add(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddAccount)(nil).Add), account)
}
