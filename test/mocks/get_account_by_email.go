// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/get_account_by_email.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	models "example/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetAccountByEmail is a mock of GetAccountByEmail interface.
type MockGetAccountByEmail struct {
	ctrl     *gomock.Controller
	recorder *MockGetAccountByEmailMockRecorder
}

// MockGetAccountByEmailMockRecorder is the mock recorder for MockGetAccountByEmail.
type MockGetAccountByEmailMockRecorder struct {
	mock *MockGetAccountByEmail
}

// NewMockGetAccountByEmail creates a new mock instance.
func NewMockGetAccountByEmail(ctrl *gomock.Controller) *MockGetAccountByEmail {
	mock := &MockGetAccountByEmail{ctrl: ctrl}
	mock.recorder = &MockGetAccountByEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAccountByEmail) EXPECT() *MockGetAccountByEmailMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetAccountByEmail) Get(email string) (*models.AccountModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", email)
	ret0, _ := ret[0].(*models.AccountModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetAccountByEmailMockRecorder) Get(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetAccountByEmail)(nil).Get), email)
}
